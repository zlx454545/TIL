::::::::::::::::::::::::: 리액트 입문
import React from 'react'
const React = require('react)

import는 es2015 modules
require는 commonJS mudles

jsx에서 css를 적용시킬때
html : <div style="background-color:blue"> </div> 
jsx : <div style={{backgroundColor: 'blue' }}> </div>
bracket중 하나는 js문법을 쓰겠다는 의미이고 안쪽 하나는 객체를 나타내는 것


const buttonText = [10, "there"];
<button> {buttonText} </button>

button에 10there이라고 나옴!

::::::::::::::::::::::::: 클래스형 컴포넌트
state는 component 관련 데이터를 담고 있는 object 
state는 setState함수를 통해서만 업데이트가 된다
함수형 컴포넌트와 다르게 render함수가 항상 있어야한다

constructor(props){
	super(props);
	this.state = {lat : null};
}

babel덕분에 constructor 없이
class내에 state = {lat:null} 해도 위와 완전히 동일!

이후 render함수 실행
setState마다 거의 대부분 render재실행
setState에서 변하는 요소만 설정해도 다른애들은 그대로 남아있음


::::::::::::::::::::::::: 클래스 컴포넌트 라이프사이클
constructor
render
componentDidMount
componentDidUpdate

!!! best practice
constructor에서 데이터로딩하지 말것.
componentDidmount에서 데이터로딩이 더욱 올바른 코드
why? 논리적으로 깔끔한 코드가 되므로


:::::::::::::::::::::::::  깔끔한코드, css 등
(컴포넌트의 return문에서 연산을 줄이고 helper variable을 통해 연산 마치고
return할땐 깔끔히하기)
(ternary 오퍼레이터 길게 여러줄 비슷한 주제로 있으면 config객체 키 이름 계산해서 갖고오고,
객체 destructuring)
(css 파일 js랑 똑같은 파일명으로 짓고 js에서 import해버리기)
(SeasonDisplay js파일에서 root 컴포넌트의 className에 season-display
이런식으로 넣어줘서 css스타일링 하기 쉬워짐)
(UX를 위해 loader컴포넌트 따로 만들어서 로딩할때 표시하기)
(	컴포넌트명.defaultProps = {
     	  message : "Loading"
	}
이런식으로 Props의 기본값 설정가능
)
(return할때 helper function으로 가능한 return뒤에 최소한의 줄로 이루어지게 하기)






<<프로젝트 pics>>
::::::::::::::::::::::::::::::유저입력


(src 폴더 안에 components 폴더 새로 만들어서 컴포넌트관리)
(event handler 콜백 function 이름은 보통 on+엘리먼트이름+change)

controlled vs uncontrolled
state에 input값을 저장하지 않는다면.. html의 dom에 직접 접근했어야 한다.
하지만 리액트에서는 이러한 일을 원하지 않음 -> 한 컴포넌트에 대한 모든 것을
한 곳에 집중시키길 원함!!



::::::::::::::::::::::::::::::api 
props로 부모컴포넌트 내의 함수를 보내서 자식 컴포넌트에서 부모컴포넌트로 데이터보낼 수 있음

(AJAX 
axios vs fetch
axios는 3rd 파티 라이브러리
fetch는 빌트인 함수 모던 브라우저 

fetch는 너무 low하다 웬만하면 axios 이용할것
axios.get함수는 두개의 arg 
1. 주소 api 문서보고 찾기
2. 옵션 
)

(3rd party나 dependency import문은 보통 다른 jsx import문보다 위에쓰는게 좋다)

axios는 따로 빼서 모듈화!!




::::::::::::::::::::::::::::::list
key가 필요한이유?
리액트는 새롭게 렌더해야 되는 리스트와 실제 DOM을 비교한후
실제 DOM에 존재하지 않는 key를 지닌 리스트 요소를 업데이트 한다.

key프로퍼티는 map함수의 root element에 넣어주어야 한다.


::::::::::::::::::::::::::::::사진 grid로 정리하기
사진 그리드 템플릿으로 정리할 때
리스트로 쭉 반환할 또다른 컴포넌트를 만들고
그 컴포넌트에서 각 사진에 대해 높이를 알아내서 
(
how?? DOM에 직접 접근 -> document.queryselector X  대신  ref 사용!
단 jsx내의 태그는 태그일뿐 실제 dom은 아님 => ref는 componentDidMount에 ref로 img자체에 접근하는거 충반한가?
=> X
why? 이미지를 다운받는데 걸리는 시간은 실제 dom생성과 차이가 있음
따라서 addEventListener을 통해 load될때까지 기달려주어야함
)
grid-row-end를 각 사진마다 알맞게 값 적용



<<프로젝트 widgets>>
::::::::::::::::::::::::::::::hooks
useEffect  : 아래 세가지 경우 중 하나에 대해 자동적으로 어떤 코드를 실행시켜주게 도와주는 함수
1. 컴포넌트가 맨처음 렌더링 됐을 때   => []
2. 컴포넌트가 맨처음 렌더링 됐을 때 && 리렌더링 될 때마다 => ...nothing...
3. 컴포넌트가 맨처음 렌더링 됐을 때 && (리렌더링 되면서 어떤 데이터 값이 변할 때) => [data]
([data1,data2] 와 같이 여러개일경우엔 하나라도 바뀌면 코드 실행)


!!! 검색할때 바로바로 밑에 결과나오는거 -> useEffect를 통해서 매번 api를 호출하는거!
-> 매번 타입한번마다 api를 계속 요청해야 함 너무 비효율적임
then how?
setTimeout 이용해서 0.5초정도의 입력이 들어오지 않을때만 api 요청!
(새로이 입력이 들어올때마다 setTimeout초기화)

!!! useEffect의 첫번재 인자로 들어가는 콜백함수는 또한 유일하게 함수만을
return 할 수 있다. (cleanup function)
첫 렌더링에 등록이 되고 이후에 리렌더링 될때마다
cleanup function이 가장 먼저 실행된다!


!!! useEffect의 첫번째 인자로 들어가는 콜백함수는 async를 붙일 수 없음
then how?
1. 콜백함수 내에서 async 함수 생성 
  1-1. 함수 변수에 넣고, 실행
  1-2. IIFE로 바로실행
2. 일반적인 promise -> then ... 사용 
둘 중 뭐가 더 낫냐? 1번이 일반적으로 더 많이 사용한다.


(
  위키피디아에서 response값이 html로 날라와서 텍스트에 html 태그들이 보이는 문제 발생
  어떻게 해결할까?

  <span dangerouslySetInnerHTML={{ __html: 우리가 가져온 값 }}></span>

  but!!! 이름에서도 알수있듯이 xss 공격 당할 수도 있음. 가급적 사용은 하지말것!
)


!!!!! useEffect안에 state나 props를 넣고 두번째 인자에 설정안해주면 eslint에서 dependency 경고를 줌.
근데 넣으니까 fetching이 두번 일어났었음
경고를 없애니까 버그가 발생
then how?
useEffect를 두개 만들고 debounced state를 따로 만들어서
term을 받은 useEffect는 setTimeout으로 debounced를 set하고,
debounced를 받은 useEffect는 즉시 실행시킴!!


classList 제거하는거 백틱으로 묶고 state로 삼항연산자 

!!!! dropdown 밖을 클릭했을때 닫히게해야함
event bubling 개념에서 
react가 설정한 event handler와 javascript가 설정한 event handler를 구분할 필요가 있음
무조건 js에서의 event handler를 모두 실행하고 나서야 react의 event handler를 실행함!
따라서 로직이 우리가 생각한것과 다르게 행동할 수 있음
then how?
use Ref를 통해서 로직을 상황에 맞게 잘 조절할것
하지만 또, dropdown이 사라질때 eventlistner가 붙어있고 그 안에 ref가 살아있기때문에 오류발생
then how?
useEffect의 클린업 function 으로 remove eventlistner 제거!


::::::::::::::::::::::::: router라이브러리 직접 흉내내보기
window.location.pathname 을 활용!
a 태그 href 어트리뷰트를 이용해서 네비게이션 만들 수 있음 
but 매번 a태그를 클릭할때마다 새로운 html 파일을 받아옴.... 리액트 왜쓰냐?
원하는건 주소만 바뀌고 네트워크 요청을 풀로 때리지 않는거
(주소는 왜 바꿔야 하는가? 북마크, 주소 자체를 복사해서 들어올때..)
then how? 
1. 주소만 바꾸기 
window.history.pushState({}, "", href); 사용!
2. 주소를 바꾼 후에.. 
  e.preventDefault(); 
  window.history.pushState({}, "", href); 
  const navEvent = new PopStateEvent("popstate"); 
  window.dispatchEvent(navEvent); 
이런 코드 썼는데 잘 모르겠음 역할은..
ㄴㄴ 
1번째 줄을 보면 디폴트 행동 막았지?
근데 우리는 뒤로가기 같이 그런 기록들을 다 넣어놓고 싶단 말이야
그래서 pushState를 통해서 기록을 넣었어
그러고 나면 새로운 이벤트를 직접 생성하고!
그 이벤트를 윈도우 객체에 직접 갖다 붙이는거야!


:::::::::::::::::::::::::custom hooks
1. 컴포넌트 내에서 재사용될 수 있는 코드를 생성할 가장 좋은 방법
2. 훅과 관련된 코드를 function 컴포넌트에서 추출할 것
3. 커스텀 훅은 언제나! primitive hook을 최소한 한 개 이상은 사용한다.
4. 커스텀 훅은 되도록! 하나의 목적을 가지게 하는게 좋다.
5. data fetching은 가장 대표적인 커스텀 훅을 만드는 로직이다

1. 함수형 컴포넌트에서 한줄한줄의 목적을 생각할 것.
2. 각 목적에 대해 인풋과 아웃풋을  찾아낼 것.
3. 이를 커스텀훅으로 추출해낼 것 -> 인풋을 줘서 아웃풋을 받아오는 함수처럼 사용할 것.

(
  hooks 폴더에 커스텀 훅 만들어서 사용. 이름은 primitive 훅과 비슷하게 지을것.
useState를 추출했다면.. useVideos와 같이

return은 [] 이렇게 해도 되고 그냥 일반적인 컨벤션은 {}
)



::::::::::::::::::::::::: 리덕스 
action 객체 -> 상태 변화 필요할때 발생함
타입, 데이터..
보통 함수로 액션 객체 타입 지정해놓고, 데이터 파라미터로 넣어서 객체 리턴시켜주는 방식으로 관리

리듀서
상태, 액션 객체 파라미터 받아서 새로운 상태 리턴
이전상태랑 액션으로 다음상태 만드는거지

스토어 
리듀서랑 애플리케이션 상태 들어있음

디스패치
스토어 내장함수 , 액션을 발생시키는 것 dispatch(action) 액션 객체를 파라미터로 넣음
스토어는 리듀서 함수 실행시켜서 새로운 상태 만들어줌

구독
리스너 함수를 파라미터로 넣어서 호출해주면 리스너 함수가 액션이 디스패치되어 상태가 업데이트 될 때마다
호출



redux에대해 이해가 가기 시작했음
1. react와 redux는 별개다.
2. redux는 데이터를 관리하는 일종의 음..  클라이언트 상의 db라고 해야되는건가? 이거는 정확히 모르겠다
이게 csr이랑 개념이 연관있는건가? 암튼 우리가 사용할 데이터를 가지고 있는 곳이다.
3. redux안에 reducer라는 함수가 있는데.. action을 받아온다. action은 음 요청을 원하는 고객?
우리가 동사무소에 뭐 주소이전이나 이런거 요청할때 내는 서류 정도로 이해하면 될 것같다.
4. reducer는 그 서류를 참고해서 중앙서버에 적힌 전국민의 데이터를 수정을 한다. 근데 이때 
수정 내역이나 이런걸 다 알아야되니깐... 이전의 기록들을 갖고있고.. 새로운 데이터를 생성한다.
(근데 이거 리덕스 devtools에 모든 상태 다 기록되던데 상태가 굉장히 규모가 크고 변화가 잦으면
성능 과부하 걸리는거 아님..?)
5. 위에서 말했듯이.. 리액트랑 리덕스는 별개인데.. 액션을 어떻게 리덕스(리듀서)에게 전해줄까? -> 
store ( reducer랑 데이터를 동시에 갖고있는.. 동사무소) 에 내장함수로 dispatch가 있음 얘가 약간
서류 받아주는 알바생정도로 생각. 
(subscribe는 아직 개념을 잘 모르겠다.)


::::::::::::::::::::::::::::::::::::::::::::::: reducer

action creator는 단순히 객체를 반환하는 함수일뿐(단 type 키를 가지고 있어야함)
reducer는 이전 상태랑 액션만 받아서 새로운 상태 반환하는 함수일뿐

redux의 
combineReducers에다가 리듀서 부서들을 각각 객체안의 인자로 집어넣고, 이 리턴값을
createStore에다 인자로 넣어서 store을 만듦!!

store에는 dispatch 함수가 있음 ( = form receiver)
action을 인자로 넣으면
리듀서가 자동으로 작동함

store의 getState 함수로 상태를 볼 수 있음



::::::::::::::::::::::::::::::::::::::::::::::: react-redux
리액트 리덕스는 
provider와 connect를 생성

provider가 부모 컴포넌트를 감싸고
connect가 자식 컴포넌트를 감쌈
근데 connect는 좀 특이한게 
context를 통해서 provider와 직접 대화를 할 수 있음
바로 provider에게 state를 달라고함
provider는 직접 connect에게 줄 수 있음
이걸 자신이 감싸고 있는 컴포넌트한테 prop으로 넘겨줌

또한 connect는 action creator에게서 받은 action을 
자신이 감싸고 있는 컴포넌트한테 prop으로 넘겨줌


::::::::::::::::::::::::::::::::::::::::::::::: 리덕스의 폴더 구조
src
ㄴactions : 액션 크리에이터
ㄴcomponents 
ㄴreducers : 리듀서 
ㄴindex.js


actions,reducers 폴더 안에 index.js를 만듦(by convention)
웹팩때문이라함

::::::::::::::::::::::::::::::::::::::::::::::: connect
1. import {connect} ...

// 액션 크리에이터를 직접 임포트해놓고 왜 직접 안쓰고 connect에 쓰는가?
// Redux is not magic!!!
// 액션 크리에이터는 단순히 plain object를 반환하는 함수인데
// 리덕스는 얘가 호출될 때마다 자동적으로 반환된 액션을 리듀서에 보내지 못함
// 리덕스 자체에서는 store에 dispatch로 직접 전달해야됨
// connect함수가 자동적으로 dispatch를 실행시켜줌!!
// 따라서 컴포넌트 내에선 그냥 액션 크리에이터 호출하기만해도 자동적으로 dispatch가 되는거임
2. connect(mapStateToProps, {액션 크리에이터})(컴포넌트);

// redux의 state가 바뀔때마다 새로운 state!!
// ownProps는 해당 컴포넌트의 prop을 이 함수에서 참조할 수 있게해줌
3. 
const mapStateToProps =  (state, ownProps) => {
  return { songs : state.songs };
}

이렇게 되면 저 연결한 컴포넌트의 props가 mapStateToProps에서 리턴한게 됨

::::::::::::::::::::::::::::::::::::::::::::::: Redux thunk
1. 컴포넌트가 스크린에 렌더됨 
2. 컴포넌트디드마운트 메소드 호출
3. 컴포넌트디드마운트에 액션 크리에터에서 콜
4. 액션 크리에이터는 API 요청을 위한 코드 실행
5. API가 데이터 줌
6. 액션 크리에이터는 API에서 받은 데이터를 payload에 담은 action을 리턴
7. 리듀서는 그 페이로드로 상태 업데이트함
8. 관련있는 애들 리렌더하게함

4,5,6이 리덕스 thunk가 관여하는 단계



action creator에서 fetch를 하게되면 async await을 하게 되는데..  오류 발생
why??
async await을 바벨로 돌려보면 switch문이 나옴
정확한 코드는 이해 못하더라도 case문에서 request 객체를 그냥 리턴하는 경우도 있고,(이건 다시 알아보기)
우리가 원하는 action을 리턴하는 경우도 있음
저 request객체를 그냥 리턴하는 경우에! action이 아닌 객체라 오류발생!

그럼 그냥 asyn await 안쓰고 promise를 보내버리면 ? 
당장의 오류는 안뜬다. 하지만...
reducer가 action을 보고 데이터를 처리하기전까지 요청이 완료되지 않았다면 reducer는 데이터 처리를 못함
하지만 action을 dispatch하고 reducer가 처리하기까지의 시간이 99.9프로!! 네트워크 요청보다 빠름

asyncronous action creater 에서는 middleware가 필요하다


redux thunk가 실제로 하는일은..
룰을 바꾸는 것 딱 그것뿐이다.
action creator는 반드시 action을 return해야 한다!
-> action creator는 action은 return할 수도 있고.. 
함수를 리턴할수도 있다. 함수일 경우는 자동으로 실행을 시켜준다.

이게 thunk가 하는 일의 전부.. 코드 14줄이니까 직접 확인해볼것

::::::::::::::::::::::::::::::::::::::::::::::: Rules of reducers
1. reducer는 절대 undefined를 리턴할 수 없고, undefined를 제외한 그어떠한 값이라도 항상! 리턴해야한다
2. reducer는 맨첨에 한번씩 실행된다. 최초의 state는 undefined, action은 미스테리한 어떤 액션이 들어가서
값을 맨첨에 undefined로 초기화한다.
근데 reducer의 인자에 기본 값을 설정해두면 undefined이기때문에 기본값이 들어가줌!
그 담부터 인자로 가장 최근의 state값이 자동으로 들어가는거임
3. pure 해야한다. 사용자의 인풋이나 네트워크 요청 값을 리턴해서는 안된다.
4. 인자로 들어온 state를 절대 mutate하지 말아야 한다.
(why? combineReducers코드를 직접까보면 hasChanged변수가 있는데 이걸 판별하는게 !== 이걸로 이전
state랑 새로운 state를 비교함)



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

npm init : 패지키.json 생성
npm i react react-dom :리액트랑 리액트돔 설치
npm i -D webpack webpack-cli: 웹팩이랑 cli 설치 -D는 개발에서만 쓰인다는 뜻
webpack.config.js 파일 생성

////////////////////////webpack.config.js 코드 //////////////////////////////
const path = require("path");

module.exports = {
    name: "NumberBaseball-setting",
    mode: "development",
    devtool: "eval",
    resolve: {
        extensions: [".js", ".jsx"],
    },

    entry: {
        app: ["./client"],
    },

    output:{
        path: path.join(__dirname, "dist"), 
        filename: "app.js",
    }
};

////////////////////////////////////////////////////////////////////////////////

npm i -D @babel/core : 바벨 다운로드
npm i -D @babel/preset-env : 브라우저에 맞춰서 최신문법을 깔아줌
npm i -D @babel/preset-react : for 리액트
npm i -D babel-loader: 웹팩이랑 바벨 연결
npm i -D @babel/plugin-proposal-class-properties : 뭔지 모름. 난 안해도 오류 안났음


웹팩이랑 바벨을 연결하는 법
/webpack.config.js 코드에 
module. exports의 entry와 output 사이에 아래 코드 삽입

////////////////////////////////////////////
 module: {
        rules: [{
            test: /\.jsx?/,
            loader: 'babel-loader',
            options: {
                presets: ['@babel/preset-env', '@babel/preset-react'],
                plugins: ['@babel/plugin-proposal-class-properties'],
            },
        }],
    },


*****
presets의 경우
  presets: [['@babel/preset-env',{
                    targets: {
                        browsers: ['> 5% in KR'],
                    }
                }],"@babel/preset-react"],
이와 같은 식으로도 설정 할 수 있음
*****


*********
plugin 까지 최종적으로 실행하고 난 코드

const path = require("path");
const webpack = require("webpack");

module.exports = {
    name: "NumberBaseball-setting",
    mode: "development",
    devtool: "eval",
    resolve: {
        extensions: [".js", ".jsx"],
    },

    entry: {
        app: ["./client"],
    },

    module: {
        rules: [{
            test: /\.jsx?/,
            loader: 'babel-loader',
            options: {
                presets: [['@babel/preset-env',{
                    targets: {
                        browsers: ['> 5% in KR'],
                    }
                }],"@babel/preset-react"],
                plugins: ['@babel/plugin-proposal-class-properties'],
            },
        }],
    },


    plugins: [
        new webpack.LoaderOptionsPlugin({debug: true}),
    ],

    output:{
        path: path.join(__dirname, "dist"), 
        filename: "app.js",
    }
};

***********

/////////////////////////////////////////////


app.js를 실제로 빌드하는 방법 두가지 
1. npx webpack
2. package.json의 scripts에 "dev" : "webpack" 추가한 후 npm run dev


핫 리로딩 설정법
npm i react-refresh @pmmmwh/react-refresh-webpack-plugin -D
npm i -D webpack-dev-server

package.json의 scripts의 "dev" : "webpack serve --env development" 로 설정
webpack.config.js 의 plugins에 new RefreshWebpackPlugin() 작성
webpack.config.js의 module의 rule의 plugins에 "react-refresh/babel" 작성
webpack.config.js의 output에 publicPath: "dist/" 추가
module.exports안에 모듈 플러그인 아웃풋 다음 
devServer: {
    publicPath: "/dist/",
    hot: true,
  } 추가

//////////////////최종 webpack.config.js ///////////////////

const path = require("path");
const webpack = require("webpack");
const RefreshWebpackPlugin = require("@pmmmwh/react-refresh-webpack-plugin");

module.exports = {
  name: "NumberBaseball-setting",
  mode: "development",
  devtool: "eval",
  resolve: {
    extensions: [".js", ".jsx"],
  },

  entry: {
    app: ["./client"],
  },

  module: {
    rules: [
      {
        test: /\.jsx?/,
        loader: "babel-loader",
        options: {
          presets: [
            [
              "@babel/preset-env",
              {
                targets: {
                  browsers: ["> 5% in KR"],
                },
              },
            ],
            "@babel/preset-react",
          ],
          plugins: [
            "@babel/plugin-proposal-class-properties",
            "react-refresh/babel",
          ],
        },
      },
    ],
  },

  plugins: [
    new webpack.LoaderOptionsPlugin({ debug: true }),
    new RefreshWebpackPlugin(),
  ],

  output: {
    path: path.join(__dirname, "dist"),
    filename: "app.js",
    publicPath: "/dist/",
  },

  devServer: {
    publicPath: "/dist/",
    hot: true,
  },
};

////////////////////////////////////////////////////////////////
