npm init : 패지키.json 생성
npm i react react-dom :리액트랑 리액트돔 설치
npm i -D webpack webpack-cli: 웹팩이랑 cli 설치 -D는 개발에서만 쓰인다는 뜻
webpack.config.js 파일 생성

////////////////////////webpack.config.js 코드 //////////////////////////////
const path = require("path");

module.exports = {
    name: "NumberBaseball-setting",
    mode: "development",
    devtool: "eval",
    resolve: {
        extensions: [".js", ".jsx"],
    },

    entry: {
        app: ["./client"],
    },

    output:{
        path: path.join(__dirname, "dist"), 
        filename: "app.js",
    }
};

////////////////////////////////////////////////////////////////////////////////

npm i -D @babel/core : 바벨 다운로드
npm i -D @babel/preset-env : 브라우저에 맞춰서 최신문법을 깔아줌
npm i -D @babel/preset-react : for 리액트
npm i -D babel-loader: 웹팩이랑 바벨 연결
npm i -D @babel/plugin-proposal-class-properties : 뭔지 모름. 난 안해도 오류 안났음


웹팩이랑 바벨을 연결하는 법
/webpack.config.js 코드에 
module. exports의 entry와 output 사이에 아래 코드 삽입

////////////////////////////////////////////
 module: {
        rules: [{
            test: /\.jsx?/,
            loader: 'babel-loader',
            options: {
                presets: ['@babel/preset-env', '@babel/preset-react'],
                plugins: ['@babel/plugin-proposal-class-properties'],
            },
        }],
    },


*****
presets의 경우
  presets: [['@babel/preset-env',{
                    targets: {
                        browsers: ['> 5% in KR'],
                    }
                }],"@babel/preset-react"],
이와 같은 식으로도 설정 할 수 있음
*****


*********
plugin 까지 최종적으로 실행하고 난 코드

const path = require("path");
const webpack = require("webpack");

module.exports = {
    name: "NumberBaseball-setting",
    mode: "development",
    devtool: "eval",
    resolve: {
        extensions: [".js", ".jsx"],
    },

    entry: {
        app: ["./client"],
    },

    module: {
        rules: [{
            test: /\.jsx?/,
            loader: 'babel-loader',
            options: {
                presets: [['@babel/preset-env',{
                    targets: {
                        browsers: ['> 5% in KR'],
                    }
                }],"@babel/preset-react"],
                plugins: ['@babel/plugin-proposal-class-properties'],
            },
        }],
    },


    plugins: [
        new webpack.LoaderOptionsPlugin({debug: true}),
    ],

    output:{
        path: path.join(__dirname, "dist"), 
        filename: "app.js",
    }
};

***********

/////////////////////////////////////////////


app.js를 실제로 빌드하는 방법 두가지 
1. npx webpack
2. package.json의 scripts에 "dev" : "webpack" 추가한 후 npm run dev


핫 리로딩 설정법
npm i react-refresh @pmmmwh/react-refresh-webpack-plugin -D
npm i -D webpack-dev-server

package.json의 scripts의 "dev" : "webpack serve --env development" 로 설정
webpack.config.js 의 plugins에 new RefreshWebpackPlugin() 작성
webpack.config.js의 module의 rule의 plugins에 "react-refresh/babel" 작성
webpack.config.js의 output에 publicPath: "dist/" 추가
module.exports안에 모듈 플러그인 아웃풋 다음 
devServer: {
    publicPath: "/dist/",
    hot: true,
  } 추가

//////////////////최종 webpack.config.js ///////////////////

const path = require("path");
const webpack = require("webpack");
const RefreshWebpackPlugin = require("@pmmmwh/react-refresh-webpack-plugin");

module.exports = {
  name: "NumberBaseball-setting",
  mode: "development",
  devtool: "eval",
  resolve: {
    extensions: [".js", ".jsx"],
  },

  entry: {
    app: ["./client"],
  },

  module: {
    rules: [
      {
        test: /\.jsx?/,
        loader: "babel-loader",
        options: {
          presets: [
            [
              "@babel/preset-env",
              {
                targets: {
                  browsers: ["> 5% in KR"],
                },
              },
            ],
            "@babel/preset-react",
          ],
          plugins: [
            "@babel/plugin-proposal-class-properties",
            "react-refresh/babel",
          ],
        },
      },
    ],
  },

  plugins: [
    new webpack.LoaderOptionsPlugin({ debug: true }),
    new RefreshWebpackPlugin(),
  ],

  output: {
    path: path.join(__dirname, "dist"),
    filename: "app.js",
    publicPath: "/dist/",
  },

  devServer: {
    publicPath: "/dist/",
    hot: true,
  },
};

////////////////////////////////////////////////////////////////






redux 끄적끄적..

action 객체 -> 상태 변화 필요할때 발생함
타입, 데이터..
보통 함수로 액션 객체 타입 지정해놓고, 데이터 파라미터로 넣어서 객체 리턴시켜주는 방식으로 관리

리듀서
상태, 액션 객체 파라미터 받아서 새로운 상태 리턴
이전상태랑 액션으로 다음상태 만드는거지

스토어 
리듀서랑 애플리케이션 상태 들어있음

디스패치
스토어 내장함수 , 액션을 발생시키는 것 dispatch(action) 액션 객체를 파라미터로 넣음
스토어는 리듀서 함수 실행시켜서 새로운 상태 만들어줌

구독
리스너 함수를 파라미터로 넣어서 호출해주면 리스너 함수가 액션이 디스패치되어 상태가 업데이트 될 때마다
호출



redux에대해 이해가 가기 시작했음
1. react와 redux는 별개다.
2. redux는 데이터를 관리하는 일종의 음..  클라이언트 상의 db라고 해야되는건가? 이거는 정확히 모르겠다
이게 csr이랑 개념이 연관있는건가? 암튼 우리가 사용할 데이터를 가지고 있는 곳이다.
3. redux안에 reducer라는 함수가 있는데.. action을 받아온다. action은 음 요청을 원하는 고객?
우리가 동사무소에 뭐 주소이전이나 이런거 요청할때 내는 서류 정도로 이해하면 될 것같다.
4. reducer는 그 서류를 참고해서 중앙서버에 적힌 전국민의 데이터를 수정을 한다. 근데 이때 
수정 내역이나 이런걸 다 알아야되니깐... 이전의 기록들을 갖고있고.. 새로운 데이터를 생성한다.
(근데 이거 리덕스 devtools에 모든 상태 다 기록되던데 상태가 굉장히 규모가 크고 변화가 잦으면
성능 과부하 걸리는거 아님..?)
5. 위에서 말했듯이.. 리액트랑 리덕스는 별개인데.. 액션을 어떻게 리덕스(리듀서)에게 전해줄까? -> 
store ( reducer랑 데이터를 동시에 갖고있는.. 동사무소) 에 내장함수로 dispatch가 있음 얘가 약간
서류 받아주는 알바생정도로 생각. 
(subscribe는 아직 개념을 잘 모르겠다.)
6. redux thunk는 그럼?  
6-1. action creator에서 fetch를 하게되면 async await을 하게 되는데.. 
async await을 바벨로 돌려보면 switch문이 나옴
정확한 코드는 이해 못하더라도 case문에서 request 객체를 그냥 리턴하는 경우도 있고,(이건 다시 알아보기)
우리가 원하는 action을 리턴하는 경우도 있음
저 request객체를 그냥 리턴하는 경우에! action이 아닌 객체라 오류발생!
6-2. 그럼 그냥 asyn await 안쓰고 promise를 보내버리면 ? 
reducer가 action을 보고 데이터를 처리하기전까지 요청이 완료되지 않았다면 reducer는 데이터 처리를 못함
하지만 action을 dispatch하고 reducer가 처리하기까지의 시간이 99.9프로!! 네트워크 요청보다 빠름

따라서 네트워크 요청이 있을땐(비동기 작업을 해야할땐) redux thunk를 써야한다!


redux thunk가 실제로 하는일은..
룰을 바꾸는 것 딱 그것뿐이다.
action creator는 반드시 action을 return해야 한다!
-> action creator는 action은 return할 수도 있고.. 
함수를 리턴할수도 있다. 함수일 경우는 자동으로 실행을 시켜준다.

이게 thunk가 하는 일의 전부.. 코드 14줄이니까 직접 확인해볼것
