npm init : 패지키.json 생성
npm i react react-dom :리액트랑 리액트돔 설치
npm i -D webpack webpack-cli: 웹팩이랑 cli 설치 -D는 개발에서만 쓰인다는 뜻
webpack.config.js 파일 생성

////////////////////////webpack.config.js 코드 //////////////////////////////
const path = require("path");

module.exports = {
    name: "NumberBaseball-setting",
    mode: "development",
    devtool: "eval",
    resolve: {
        extensions: [".js", ".jsx"],
    },

    entry: {
        app: ["./client"],
    },

    output:{
        path: path.join(__dirname, "dist"), 
        filename: "app.js",
    }
};

////////////////////////////////////////////////////////////////////////////////

npm i -D @babel/core : 바벨 다운로드
npm i -D @babel/preset-env : 브라우저에 맞춰서 최신문법을 깔아줌
npm i -D @babel/preset-react : for 리액트
npm i -D babel-loader: 웹팩이랑 바벨 연결
npm i -D @babel/plugin-proposal-class-properties : 뭔지 모름. 난 안해도 오류 안났음


웹팩이랑 바벨을 연결하는 법
/webpack.config.js 코드에 
module. exports의 entry와 output 사이에 아래 코드 삽입

////////////////////////////////////////////
 module: {
        rules: [{
            test: /\.jsx?/,
            loader: 'babel-loader',
            options: {
                presets: ['@babel/preset-env', '@babel/preset-react'],
                plugins: ['@babel/plugin-proposal-class-properties'],
            },
        }],
    },


*****
presets의 경우
  presets: [['@babel/preset-env',{
                    targets: {
                        browsers: ['> 5% in KR'],
                    }
                }],"@babel/preset-react"],
이와 같은 식으로도 설정 할 수 있음
*****


*********
plugin 까지 최종적으로 실행하고 난 코드

const path = require("path");
const webpack = require("webpack");

module.exports = {
    name: "NumberBaseball-setting",
    mode: "development",
    devtool: "eval",
    resolve: {
        extensions: [".js", ".jsx"],
    },

    entry: {
        app: ["./client"],
    },

    module: {
        rules: [{
            test: /\.jsx?/,
            loader: 'babel-loader',
            options: {
                presets: [['@babel/preset-env',{
                    targets: {
                        browsers: ['> 5% in KR'],
                    }
                }],"@babel/preset-react"],
                plugins: ['@babel/plugin-proposal-class-properties'],
            },
        }],
    },


    plugins: [
        new webpack.LoaderOptionsPlugin({debug: true}),
    ],

    output:{
        path: path.join(__dirname, "dist"), 
        filename: "app.js",
    }
};

***********

/////////////////////////////////////////////


app.js를 실제로 빌드하는 방법 두가지 
1. npx webpack
2. package.json의 scripts에 "dev" : "webpack" 추가한 후 npm run dev


핫 리로딩 설정법
npm i react-refresh @pmmmwh/react-refresh-webpack-plugin -D
npm i -D webpack-dev-server

package.json의 scripts의 "dev" : "webpack serve --env development" 로 설정
webpack.config.js 의 plugins에 new RefreshWebpackPlugin() 작성
webpack.config.js의 module의 rule의 plugins에 "react-refresh/babel" 작성
webpack.config.js의 output에 publicPath: "dist/" 추가
module.exports안에 모듈 플러그인 아웃풋 다음 
devServer: {
    publicPath: "/dist/",
    hot: true,
  } 추가

//////////////////최종 webpack.config.js ///////////////////

const path = require("path");
const webpack = require("webpack");
const RefreshWebpackPlugin = require("@pmmmwh/react-refresh-webpack-plugin");

module.exports = {
  name: "NumberBaseball-setting",
  mode: "development",
  devtool: "eval",
  resolve: {
    extensions: [".js", ".jsx"],
  },

  entry: {
    app: ["./client"],
  },

  module: {
    rules: [
      {
        test: /\.jsx?/,
        loader: "babel-loader",
        options: {
          presets: [
            [
              "@babel/preset-env",
              {
                targets: {
                  browsers: ["> 5% in KR"],
                },
              },
            ],
            "@babel/preset-react",
          ],
          plugins: [
            "@babel/plugin-proposal-class-properties",
            "react-refresh/babel",
          ],
        },
      },
    ],
  },

  plugins: [
    new webpack.LoaderOptionsPlugin({ debug: true }),
    new RefreshWebpackPlugin(),
  ],

  output: {
    path: path.join(__dirname, "dist"),
    filename: "app.js",
    publicPath: "/dist/",
  },

  devServer: {
    publicPath: "/dist/",
    hot: true,
  },
};

////////////////////////////////////////////////////////////////






redux 끄적끄적..

action 객체 -> 상태 변화 필요할때 발생함
타입, 데이터..
보통 함수로 액션 객체 타입 지정해놓고, 데이터 파라미터로 넣어서 객체 리턴시켜주는 방식으로 관리

리듀서
상태, 액션 객체 파라미터 받아서 새로운 상태 리턴
이전상태랑 액션으로 다음상태 만드는거지

스토어 
리듀서랑 애플리케이션 상태 들어있음

디스패치
스토어 내장함수 , 액션을 발생시키는 것 dispatch(action) 액션 객체를 파라미터로 넣음
스토어는 리듀서 함수 실행시켜서 새로운 상태 만들어줌

구독
리스너 함수를 파라미터로 넣어서 호출해주면 리스너 함수가 액션이 디스패치되어 상태가 업데이트 될 때마다
호출
